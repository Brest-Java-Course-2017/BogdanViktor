select_all_directors=select director_id, first_name, last_name from director
select_all_movies=select movie.movie_id, movie.movie_title, movie.release_date, movie.rating, \
                   movie.id_movie_director, director.first_name, director.last_name \
                    FROM director INNER JOIN movie ON director.director_id=movie.id_movie_director;
select_director_by_id=select director_id, first_name, last_name FROM director WHERE director_id = :director_id;
select_all_directors_with_movie_rating=\
                    SELECT director.director_id, director.first_name, director.last_name, \
                           AVG(movie.rating) AS avarage \
                    FROM director LEFT JOIN movie ON director.director_id=movie.id_movie_director \
                    GROUP BY director.director_id;
insert_director=INSERT INTO director \
                (director_id, first_name, last_name) \
                VALUES (:director_id, :first_name, :last_name);
update_director=UPDATE director SET first_name= :first_name, last_name = :last_name \
                WHERE director_id = :director_id;
delete_director=DELETE FROM director WHERE director_id = :director_id;
select_movie_by_director=SELECT movie_id, movie_title, release_date, rating, id_movie_director \
                        FROM movie \
                        WHERE id_movie_director = :id_movie_director;



#
#DROP TABLE IF EXISTS director;
#CREATE TABLE IF NOT EXISTS director (
#director_id INT NOT NULL AUTO_INCREMENT,
#first_name VARCHAR(30) NOT NULL,
#last_name VARCHAR(30) NOT NULL,
#PRIMARY KEY (director_id));
#
#DROP TABLE IF EXISTS movie;
#CREATE TABLE IF NOT EXISTS movie (
#movie_id INT NOT NULL AUTO_INCREMENT,
#movie_title VARCHAR(150) NOT NULL,
#release_date DATE NOT NULL,
#rating DOUBLE Not NULL,
#id_movie_director int,
#PRIMARY KEY (movie_id),
#FOREIGN KEY (id_movie_director) REFERENCES director (director_id)  );

